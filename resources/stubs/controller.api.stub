<?php

namespace DummyNamespace;

use DummyFullModelClass;
use Illuminate\Http\Request;
use App\Http\Requests\DummyModelClassUpdateRequest;
use App\Http\Requests\DummyModelClassStoreRequest;
use App\Http\Resources\DummyModelClassResource;
use DummyRootNamespaceHttp\Controllers\Controller;

class DummyClass extends Controller
{
    
    function __construct()
    {
        // $this->middleware('permission:view_blogs', ['only' => ['index', 'show']]);
        // $this->middleware('permission:add_blogs',  ['only' => ['store']]);
        // $this->middleware('permission:edit_blogs', ['only' => ['update']]);
        // $this->middleware('permission:delete_blogs', ['only' => ['destroy']]);
    }

    public function index()
    {
        $rows = DummyModelClassResource::collection(DummyModelClass::fetchData(request()->all()));
        return response()->json(['rows' => $rows], 200);
    }

    public function store(DummyModelClassStoreRequest $request)
    {
        $row = DummyModelClass::createOrUpdate(NULL, request()->all());
        if($row === true) {
            return response()->json(['message' => ''], 201);
        } else {
            return response()->json(['message' => 'Unable to create entry ' . $row], 500);
        }
    }

    public function show($id)
    {
        $row = new DummyModelClassResource(DummyModelClass::findOrFail(decrypt($id)));
        return response()->json(['row' => $row], 200);
    }

    public function update(DummyModelClassUpdateRequest $request, $id)
    {
        $row = DummyModelClass::createOrUpdate(decrypt($id), request()->all());
        if($row === true) {
            return response()->json(['message' => ''], 200);
        } else {
            return response()->json(['message' => 'Unable to update entry ' . $row], 500);
        }
    }

    public function destroy($id)
    {
        try {
            $row = DummyModelClass::query();

            // can work with multi select item to delete..
            if(strpos($id, ',') !== false) {
                foreach(explode(',',$id) as $sid) {
                    $ids[] = $sid;
                }
                $row->whereIN('id', $ids);
            } else {
                $row->where('id', $id);
            }   
            $row->delete();

            return response()->json(['message' => ''], 200);
        } catch (\Exception $e) {
            return response()->json(['message' => 'Unable to delete entry, '. $e->getMessage()], 500);
        }
    }
}
