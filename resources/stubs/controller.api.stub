<?php
namespace DummyNamespace;

use DummyFullModelClass;
//use Illuminate\Http\Request;
use App\Http\Requests\DummyModelClass\{DummyModelClassStoreRequest,DummyModelClassUpdateRequest};
use App\Http\Resources\DummyModelClass\{DummyModelClassResource,DummyModelClassCollection};
use DummyRootNamespaceHttp\Controllers\Controller;
use Larafast\Fastapi\Controller\Actions\{Destroy, Index, Show, Store, Update};
use Exception;
use Illuminate\Http\JsonResponse;

class DummyClass extends Controller
{
    use Index,Update,Destroy,Store,Show;
    function __construct()
    {
        // $this->middleware('permission:view_'.$DummyModelVariable, ['only' => ['index', 'show', 'export']]);
        // $this->middleware('permission:add_'.$DummyModelVariable,  ['only' => ['store']]);
        // $this->middleware('permission:edit_'.$DummyModelVariable,
        //                         ['only' => ['update', 'active', 'inactive', 'trash', 'restore']]);
        // $this->middleware('permission:delete_'.$DummyModelVariable, ['only' => ['destroy']]);
    }


    /**
     * @return JsonResponse
     */
    public function index()
    {
        $allowedFilters = ['id'];
        $defaultSort = ['id'];
        $allowedSorts = ['id'];

        return $this->ApiIndex(DummyModelClass::class, function ($collection) {
            if (request()->wantsJson()) {
                return response()->json(DummyModelClassResource::collection($collection)->response()->getData(true), 200);
            }
            return view('index', compact('collection'));
        }, false, $allowedFilters, $defaultSort, $allowedSorts);
    }

    /**
     * @param DummyModelClassStoreRequest $request
     * @return JsonResponse|mixed
     */
    public function store(DummyModelClassStoreRequest $request)
    {
        $validated = $request->validated();
        // handel Upload Image Here Or in Request
        return $this->ApiStore(DummyModelClass::class, $validated, function ($model) use ($request) {
            if ($request->wantsJson()) {
                //handel attached data or anything
                return response()->json(new DummyModelClassResource($model), 200);
            }
            // handel your back response
            return back()->with(["message" => "Created Successfully"]);
        });
    }

    /**
     * @param $DummyModelVariable
     * @return DummyModelClassResource|JsonResponse
     */
    public function show($DummyModelVariable)
    {
        try {
            return new DummyModelClassResource($this->ApiShow(DummyModelClass::class, $DummyModelVariable));
        } catch (Exception $e) {
            return response()->json(['message' => 'Unable to show entry, ' . (config('app.debug', true) ? $e->getMessage() : ' Debug is False ')], 500);
        }
    }

    /**
     * @param DummyModelClassUpdateRequest $request
     * @param $DummyModelVariable
     * @return JsonResponse|mixed
     */
    public function update(DummyModelClassUpdateRequest $request, $DummyModelVariable)
    {
        $model = $this->ApiShow(DummyModelClass::class, $DummyModelVariable);
        $validated = $request->validated();
        // handel Upload Image Here Or in Request
        return $this->ApiUpdate($model, $validated, function ($model, $updatedResponse) use ($request) {
            if ($request->wantsJson()) {
                return response()->json(new DummyModelClassResource($model), 200);
            }
            // handel your back response
            return back()->with(["message" => "Updated Successfully"]);
        });
    }

    /**
     * @param $DummyModelVariable
     * @return JsonResponse
     */
    public function destroy($DummyModelVariable)
    {
        $model = $this->ApiShow(DummyModelClass::class, $DummyModelVariable);

        return $this->ApiDestroy($model);
    }
}
